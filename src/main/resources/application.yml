# ===================================================================
# SOLANA ARBITRAGE BOT - UPDATED CONFIGURATION
# ===================================================================
#
# ARCHITECTURAL CHANGE:
# Jupiter API removed - using DexScreener prices + Solana RPC fallback
# Focus on respecting rate limits and utilizing available endpoints efficiently
#
# Supported DEX: raydium, orca, meteora
# Price source: DexScreener (primary) + Solana RPC (verification only)

spring:
  application:
    name: solana-arbitrage-bot

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:arbitrage}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    hikari:
      maximum-pool-size: 8
      connection-timeout: 15000
      idle-timeout: 300000
      max-lifetime: 900000

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:migration

# ===================================================================
# MODULES - UPDATED
# ===================================================================
modules:
  dex-screener:
    enabled: ${DEX_SCREENER_ENABLED:true}
  solana-rpc:
    enabled: ${SOLANA_RPC_ENABLED:true}
  jupiter-pricing:           # DISABLED - no longer using Jupiter API
    enabled: false
  arbitrage-detector:
    enabled: ${ARBITRAGE_DETECTOR_ENABLED:true}
  trade-executor:
    enabled: ${TRADE_EXECUTOR_ENABLED:false}

# ===================================================================
# DEX SCREENER - PRIMARY PRICE SOURCE
# ===================================================================
dex-screener:
  api:
    base-url: https://api.dexscreener.com/latest
    timeout-seconds: 15
    rate-limit: 300  # 300 requests per minute as per documentation

  websocket:
    enabled: ${DEX_SCREENER_WS_ENABLED:false}

  scanner:
    interval-minutes: ${DEX_SCREENER_INTERVAL:30}  # Conservative interval
    min-liquidity-usd: ${MIN_LIQUIDITY_USD:40000}

  # Price updates now from DexScreener directly
  price-updates:
    enabled: true
    source: "dexscreener"  # Use DexScreener prices instead of Jupiter
    max-pools: ${DEXSCREENER_MAX_POOLS:50}
    update-interval-minutes: 15

  # Target DEX (Jupiter excluded - it's an aggregator)
  target-dex:
    - raydium    # Raydium AMM
    - orca       # Orca Whirlpools
    - meteora    # Meteora Dynamic Pools

# ===================================================================
# JUPITER PRICE API - DISABLED
# ===================================================================
jupiter:
  price-api:
    enabled: false  # No longer using Jupiter API
    # Configuration kept for potential future use
    base-url: ${JUPITER_API_URL:https://lite-api.jup.ag/price/v3}
    timeout-seconds: 5
    max-tokens-per-request: 50

# ===================================================================
# SOLANA RPC - VERIFICATION AND FALLBACK ONLY
# ===================================================================
solana:
  rpc:
    # Primary RPC with conservative rate limiting
    primary:
      url: ${PRIMARY_RPC_URL:https://api.mainnet-beta.solana.com}

    # Helius fallback for higher limits
    fallback:
      enabled: ${HELIUS_FALLBACK_ENABLED:true}
      url: ${HELIUS_RPC_URL:}  # Set via environment variable
      api-key: ${HELIUS_API_KEY:}

    # Conservative settings respecting public RPC limits
    timeout-ms: 8000
    max-retries: 2
    retry-delay-ms: 2000

    # Rate limiting configuration
    rate-limiting:
      enabled: true
      requests-per-10-seconds: 35  # Under 40 limit
      concurrent-connections: 30   # Under 40 limit
      backoff-after-limit-ms: 10000  # 10 second backoff after 429

    # Conservative verification settings
    verification:
      max-pools-per-batch: 3      # Very conservative
      delay-between-requests-ms: 2000  # 2 seconds between requests
      max-verification-pools: 5   # Limit total verifications per cycle

# ===================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# ===================================================================

---
# DEVELOPMENT - Minimal RPC usage
spring:
  config:
    activate:
      on-profile: development

dex-screener:
  scanner:
    interval-minutes: 45  # Less frequent in dev
  price-updates:
    max-pools: 20

solana:
  rpc:
    verification:
      max-pools-per-batch: 2
      max-verification-pools: 3

logging:
  level:
    root: INFO
    com.berrx: DEBUG

---
# PRODUCTION - Balanced approach
spring:
  config:
    activate:
      on-profile: production

dex-screener:
  scanner:
    interval-minutes: 30
  price-updates:
    max-pools: 50
    enabled: true

solana:
  rpc:
    fallback:
      enabled: true  # Always use fallback in production
    verification:
      max-pools-per-batch: 3
      max-verification-pools: 5

logging:
  level:
    root: WARN
    com.berrx: INFO

---
# PREMIUM - With Helius RPC and higher limits
spring:
  config:
    activate:
      on-profile: premium

dex-screener:
  scanner:
    interval-minutes: 15  # More frequent with premium
  price-updates:
    max-pools: 100

solana:
  rpc:
    primary:
      url: ${HELIUS_RPC_URL:https://mainnet.helius-rpc.com/?api-key=${HELIUS_API_KEY}}
    fallback:
      enabled: true
      url: https://api.mainnet-beta.solana.com  # Public as fallback
    timeout-ms: 5000
    verification:
      max-pools-per-batch: 5
      max-verification-pools: 10



# ===================================================================
# CONFIGURATION DOCUMENTATION
# ===================================================================

# ⚠️  IMPORTANT NOTES:
#
# 1. RATE LIMITS:
#    - DexScreener: 300 requests/minute (primary price source)
#    - Solana Public RPC: 40 requests/10 seconds (verification only)
#    - Helius: Higher limits with API key (fallback)
#
# 2. ARCHITECTURE:
#    - DexScreener provides pool metadata + prices
#    - Solana RPC used only for arbitrage verification
#    - No dependency on Jupiter API
#
# 3. SCALING:
#    - Development: Conservative limits
#    - Production: Balanced approach
#    - Premium: Higher limits with paid RPC
#
# 4. MONITORING:
#    - /actuator/health - system health
#    - /actuator/metrics - performance metrics
#    - /api/pools/stats - pool statistics